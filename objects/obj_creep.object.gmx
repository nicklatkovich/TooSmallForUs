<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
xx = undefined;
yy = undefined;

move = false;

dir = random(360);
spd = 0.0001;

XX = 0;
YY = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (move) {
    var poses = 0;
    for (var d = 0; d &lt; 12; d++) {
        var xt = xx + hex_ddx(xx, yy, d);
        var yt = yy + hex_ddy(d);
        if (obj_map.Grid[#xt,yt] == 2) {
            poses++;
        }
    }
    randomize( );
    var pos = irandom(poses - 1);
    for (var d = 0; d &lt; 12; d++) {
        var xt = xx + hex_ddx(xx, yy, d);
        var yt = yy + hex_ddy(d);
        if (obj_map.Grid[#xt,yt] == 2) {
            if (pos == 0) {
                xx = xt;
                yy = yt;
                break;
            }
            pos--;
        }
    }
    move = false;
}

XX = (x - obj_map.PosX) * obj_map.Scale;
YY = (y - obj_map.PosY) * obj_map.Scale;
XT = getPosX(xx, yy);
YT = getPosY(xx, yy);

if (point_distance(XX, YY, XT, YT) &lt; obj_map.CellH * obj_map.Scale) {
    //move = true;
} else {
}
    var step_dir = 0.000125 * delta_time;
    var p_dir = point_direction(XX, YY, XT, YT);
    var a_diff = angle_difference(p_dir, dir);
    if (abs(a_diff) &lt; step_dir) {
        dir = p_dir;
    } else {
        dir += sign(a_diff) * step_dir;
    }
    x += lengthdir_x(spd * delta_time, dir);
    y += lengthdir_y(spd * delta_time, dir);

    /*
obj_map.TPosX = (x - room_width / 2 / obj_map.Scale);
obj_map.TPosY = (y - room_height / 2 / obj_map.Scale);
    */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_color(c_red);
draw_circle(XX, YY, obj_map.CellH / 8 * obj_map.Scale, false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
