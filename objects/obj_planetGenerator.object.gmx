<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
randomize( );

var w = 512;
var h = 512;

Surf = surface_create(w, h);
surface_set_target(Surf);
draw_clear(c_gray);
surface_reset_target( );

Out = surface_create(AppSurf.Width, AppSurf.Height);
surface_set_target(Out);
draw_clear(c_gray);
surface_reset_target( );

SurfPr = surface_create(w, h);
surface_set_target(SurfPr);
draw_clear(c_gray);
surface_reset_target( );

var u_tTex = shader_get_sampler_index(glsl_sh, "u_tTex");

for (var i = 0; i &lt; 128; i++) {
    var alpha = 0.2;//max(0.2, 1 / (i + 1));
    var t1 = irandom(w - 1);
    var d1 = irandom(w - 1);
    var t2 = irandom(w - 1);
    var d2 = irandom(w - 1);
    if (d1 &gt; d2) {
        var swap = d1;
        d1 = d2;
        d2 = swap;
    }
    if (t1 &gt; t2) {
        var swap = t1;
        t1 = t2;
        t2 = swap;
    }
    b = irandom(1);
    var cols;
    cols[0] = c_white;
    cols[1] = c_black;
    cols[2] = c_white;
    
    inv = irandom(2);
    
    surface_set_target(SurfPr);

    switch (inv) {
    case 0:
        draw_primitive_begin(pr_trianglestrip);
        draw_vertex_colour(0, 0, cols[b], alpha);
        draw_vertex_colour(t1, 0, cols[b], alpha);
        draw_vertex_colour(0, h, cols[b], alpha);
        draw_vertex_colour(d1, h, cols[b], alpha);
        draw_primitive_end( );
    
        draw_primitive_begin(pr_trianglestrip);
        draw_vertex_colour(t2, 0, cols[b], alpha);
        draw_vertex_colour(w, 0, cols[b], alpha);
        draw_vertex_colour(d2, h, cols[b], alpha);
        draw_vertex_colour(w, h, cols[b], alpha);
        draw_primitive_end( );
        
        draw_primitive_begin(pr_trianglestrip);
        draw_vertex_colour(t1, 0, cols[1 + b], alpha);
        draw_vertex_colour(t2, 0, cols[1 + b], alpha);
        draw_vertex_colour(d1, h, cols[1 + b], alpha);
        draw_vertex_colour(d2, h, cols[1 + b], alpha);
        draw_primitive_end( );
        
        break;
    case 1:
        draw_primitive_begin(pr_trianglestrip);
        draw_vertex_colour(t2 - w, 0, cols[b], alpha);
        draw_vertex_colour(t2 - w, h, cols[b], alpha);
        draw_vertex_colour(d1, h, cols[b], alpha);
        draw_primitive_end( );

        draw_primitive_begin(pr_trianglestrip);
        draw_vertex_colour(t2 - w, 0, cols[1 + b], alpha);
        draw_vertex_colour(0, 0, cols[1 + b], alpha);
        draw_vertex_colour(d1, h, cols[1 + b], alpha);
        draw_vertex_colour(t1, 0, cols[1 + b], alpha);
        draw_vertex_colour(d2, h, cols[1 + b], alpha);
        draw_primitive_end( );
        
        draw_primitive_begin(pr_trianglestrip);
        draw_vertex_colour(t1, 0, cols[b], alpha);
        draw_vertex_colour(d2, h, cols[b], alpha);
        draw_vertex_colour(t2, 0, cols[b], alpha);
        draw_vertex_colour(d1 + w, h, cols[b], alpha);
        draw_primitive_end( );

        draw_primitive_begin(pr_trianglestrip);
        draw_vertex_colour(t2, 0, cols[1 + b], alpha);
        draw_vertex_colour(w, 0, cols[1 + b], alpha);
        draw_vertex_colour(d1 + w, h, cols[1 + b], alpha);
        draw_primitive_end( );
        
        break;
    case 2:
        draw_primitive_begin(pr_trianglestrip);
        draw_vertex_colour(0, 0, cols[b], alpha);
        draw_vertex_colour(t1, 0, cols[b], alpha);
        draw_vertex_colour(t2 - w, h, cols[b], alpha);
        draw_primitive_end( );

        draw_primitive_begin(pr_trianglestrip);
        draw_vertex_colour(t2 - w, h, cols[1 + b], alpha);
        draw_vertex_colour(t1, 0, cols[1 + b], alpha);
        draw_vertex_colour(d1, h, cols[1 + b], alpha);
        draw_vertex_colour(t2, 0, cols[1 + b], alpha);
        draw_primitive_end( );
        
        draw_primitive_begin(pr_trianglestrip);
        draw_vertex_colour(d1, h, cols[b], alpha);
        draw_vertex_colour(t2, 0, cols[b], alpha);
        draw_vertex_colour(d2, h, cols[b], alpha);
        draw_vertex_colour(t1 + w, 0, cols[b], alpha);
        draw_primitive_end( );

        draw_primitive_begin(pr_trianglestrip);
        draw_vertex_colour(d2, h, cols[1 + b], alpha);
        draw_vertex_colour(t1 + w, 0, cols[1 + b], alpha);
        draw_vertex_colour(w, h, cols[1 + b], alpha);
        draw_primitive_end( );
        
        break;
    }

    surface_reset_target( );
    
    texture_set_stage(u_tTex, surface_get_texture(Surf));
    
    shader_set(glsl_sh);
    surface_set_target(Surf);
    draw_surface(SurfPr, 0, 0);
    surface_reset_target( );
    shader_reset( );
}

draw_set_blend_mode(bm_normal);

shader_set(glsl_earth);
u_clWater = shader_get_uniform(glsl_earth, "u_clWater");
u_clBeach = shader_get_uniform(glsl_earth, "u_clBeach");
u_clForest = shader_get_uniform(glsl_earth, "u_clForest");
u_clMount = shader_get_uniform(glsl_earth, "u_clMount");

shader_set_uniform_f(u_clWater, random(1), random(1), random(1), 1);
shader_set_uniform_f(u_clBeach, random(1), random(1), random(1), 1);
shader_set_uniform_f(u_clForest, random(1), random(1), random(1), 1);
shader_set_uniform_f(u_clMount, random(1), random(1), random(1), 1);
shader_reset( );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
